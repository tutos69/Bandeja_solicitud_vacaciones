package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class VacationRequestAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVacationRequestAllPropertiesEquals(VacationRequest expected, VacationRequest actual) {
        assertVacationRequestAutoGeneratedPropertiesEquals(expected, actual);
        assertVacationRequestAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVacationRequestAllUpdatablePropertiesEquals(VacationRequest expected, VacationRequest actual) {
        assertVacationRequestUpdatableFieldsEquals(expected, actual);
        assertVacationRequestUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVacationRequestAutoGeneratedPropertiesEquals(VacationRequest expected, VacationRequest actual) {
        assertThat(actual)
            .as("Verify VacationRequest auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVacationRequestUpdatableFieldsEquals(VacationRequest expected, VacationRequest actual) {
        assertThat(actual)
            .as("Verify VacationRequest relevant properties")
            .satisfies(a -> assertThat(a.getStartDate()).as("check startDate").isEqualTo(expected.getStartDate()))
            .satisfies(a -> assertThat(a.getEndDate()).as("check endDate").isEqualTo(expected.getEndDate()))
            .satisfies(a -> assertThat(a.getRequestedDays()).as("check requestedDays").isEqualTo(expected.getRequestedDays()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getApproverComment()).as("check approverComment").isEqualTo(expected.getApproverComment()))
            .satisfies(a -> assertThat(a.getApprovedStartDate()).as("check approvedStartDate").isEqualTo(expected.getApprovedStartDate()))
            .satisfies(a -> assertThat(a.getApprovedEndDate()).as("check approvedEndDate").isEqualTo(expected.getApprovedEndDate()))
            .satisfies(a -> assertThat(a.getApprovedDays()).as("check approvedDays").isEqualTo(expected.getApprovedDays()))
            .satisfies(a -> assertThat(a.getCreatedAt()).as("check createdAt").isEqualTo(expected.getCreatedAt()))
            .satisfies(a -> assertThat(a.getDecidedAt()).as("check decidedAt").isEqualTo(expected.getDecidedAt()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertVacationRequestUpdatableRelationshipsEquals(VacationRequest expected, VacationRequest actual) {
        assertThat(actual)
            .as("Verify VacationRequest relationships")
            .satisfies(a -> assertThat(a.getEmployee()).as("check employee").isEqualTo(expected.getEmployee()));
    }
}
